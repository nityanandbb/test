name: Lighthouse CLI Workflow

on:
  workflow_dispatch:
    inputs:
      projectName:
        description: "Project Name"
        required: false
        default: "Internal"
      client:
        description: "Client Name"
        required: false
        default: "Internal"
      projectManager:
        description: "Project Manager"
        required: false
        default: "Kunal"
      qaManager:
        description: "QA Manager"
        required: false
        default: "Archana"
      expectedLoadTime:
        description: "Expected Load Time (e.g., '3 seconds')"
        required: false
        default: "3 seconds"
      urls:
        description: "Comma-separated list of URLs (e.g., 'url1.com,url2.com')"
        required: true

jobs:
  setup-and-execute:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout repository
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Setup Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: "^18.3 || ^20.18.1"

    # Step 3: Install Dependencies
    - name: Install Lighthouse CLI
      run: npm install

    # Step 4: Validate Inputs and Export as JSON
    - name: Validate and Export Inputs
      run: |
        echo -e "üü¢ Validating inputs..."

        # Validate and sanitize URLs
        if [ -z "${{ github.event.inputs.urls }}" ]; then
          echo -e "‚ùå No URLs provided. Please provide valid URLs to proceed."
          exit 1
        fi

        # Split URLs and sanitize
        urls=$(echo "${{ github.event.inputs.urls }}" | tr ',' '\n' | sed 's/^ *//g; s/ *$//g; s/^\"//g; s/\"$//g')

        # Validate URL format
        valid_urls=()
        for url in $urls; do
          if [[ ! $url =~ ^https?:// ]]; then
            echo -e "‚ùå Invalid URL format: $url. URLs must start with 'http://' or 'https://'."
            exit 1
          else
            echo -e "‚úÖ Valid URL: $url"
            valid_urls+=("$url")
          fi
        done

        echo -e "‚úÖ All URLs validated successfully."

        # Export validated inputs as JSON
        echo "{
          \"projectName\": \"${{ github.event.inputs.projectName }}\",
          \"client\": \"${{ github.event.inputs.client }}\",
          \"projectManager\": \"${{ github.event.inputs.projectManager }}\",
          \"qaManager\": \"${{ github.event.inputs.qaManager }}\",
          \"expectedLoadTime\": \"${{ github.event.inputs.expectedLoadTime }}\",
          \"urls\": [\"$(IFS=,; echo "${valid_urls[*]}")\"]
        }" > github_inputs.json

        echo "GITHUB_INPUTS=$(cat github_inputs.json)" >> $GITHUB_ENV

    # Step 5: Start Lighthouse Execution
    - name: Execute Lighthouse Tests
      run: |
        echo -e "üöÄ Starting Lighthouse tests..."

        # Log inputs
        echo -e "üîç Debug: Inputs passed to the script:"
        cat github_inputs.json

        # Run Node.js script with inputs
        node executeGithub.js

        echo -e "‚úÖ Lighthouse tests completed."

    # Step 6: Wait for Report Generation (Adding Delay)
    - name: Wait for Reports to be generated
      run: |
        echo -e "‚è≥ Waiting for 20 seconds to ensure reports are generated..."
        sleep 20

    # Step 7: Export and Move Reports to Reports_QA Folder
    - name: Export and Move Reports
      run: |
        echo -e "üìÇ Exporting and moving reports to 'Reports_QA' folder..."

        # Create Reports_QA folder if not exists
        mkdir -p ./Reports_QA

        # Move HTML reports to Reports_QA folder
        mv *.html ./Reports_QA/
        echo -e "‚úÖ HTML report saved and moved to 'Reports_QA'."

        # Debug: List files in the current directory (to help troubleshoot)
        ls -l

        # Move CSV reports from results to Reports_QA folder
        mv ./results/*.csv ./Reports_QA/
        echo -e "‚úÖ CSV report saved and moved to 'Reports_QA'."

    # Step 8: Upload CSV and HTML Reports as Artifacts
    - name: Upload CSV and HTML Reports as Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: lighthouse-csv-html-reports
        path: ./Reports_QA/*

    # Step 9: Upload Archived Lighthouse Results as Artifacts
    - name: Upload Archived Lighthouse Results as Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: lighthouse-full-results
        path: ./.lighthouseci/*
