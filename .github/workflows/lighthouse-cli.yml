name: Lighthouse CLI Workflow

on:
  workflow_dispatch:
    inputs:
      projectName:
        description: "Project Name"
        required: false
        default: "Internal"
      client:
        description: "Client Name"
        required: false
        default: "Internal"
      projectManager:
        description: "Project Manager"
        required: false
        default: "Kunal"
      qaManager:
        description: "QA Manager"
        required: false
        default: "Archana"
      expectedLoadTime:
        description: "Expected Load Time (e.g., '3 seconds')"
        required: false
        default: "3 seconds"
      urls:
        description: "Comma-separated list of URLs (e.g., 'url1.com,url2.com')"
        required: true

jobs:
  setup-and-execute:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '^18.3 || ^20.18.1'

      # Step 3: Install Dependencies
      - name: Install Lighthouse CLI
        run: npm install

      # Step 4: Validate Inputs and Prepare Environment
      - name: Validate Inputs
        run: |
          echo -e "\uD83D\uDFE2 Validating inputs..."

          # Validate and sanitize URLs
          if [ -z "${{ github.event.inputs.urls }}" ]; then
            echo -e "\u274C No URLs provided. Please provide valid URLs to proceed."
            exit 1
          fi

          # Split URLs and sanitize by trimming spaces and quotes
          urls=$(echo "${{ github.event.inputs.urls }}" | tr ',' '\n' | sed 's/^ *//g; s/ *$//g; s/^\"\(.*\)\"$/\1/')

          # Validate URL format
          valid_urls=()
          for url in $urls; do
            if [[ ! $url =~ ^https?:// ]]; then
              echo -e "\u274C Invalid URL format: $url. URLs must start with 'http://' or 'https://'."
              exit 1
            else
              echo -e "\u2705 Valid URL: $url"
              valid_urls+=("$url")
            fi
          done

          echo -e "\u2705 All URLs validated successfully."

          # Export inputs as environment variables
          echo "PROJECT_NAME=${{ github.event.inputs.projectName }}" >> $GITHUB_ENV
          echo "CLIENT=${{ github.event.inputs.client }}" >> $GITHUB_ENV
          echo "PROJECT_MANAGER=${{ github.event.inputs.projectManager }}" >> $GITHUB_ENV
          echo "QA_MANAGER=${{ github.event.inputs.qaManager }}" >> $GITHUB_ENV
          echo "EXPECTED_LOAD_TIME=${{ github.event.inputs.expectedLoadTime }}" >> $GITHUB_ENV

          # Export URLs as a list
          echo "TESTFILES_LIST=${valid_urls[*]}" >> $GITHUB_ENV

      # Step 5: Start Lighthouse Execution
      - name: Execute Lighthouse Tests
        run: |
          echo -e "\uD83D\uDE80 Starting Lighthouse tests..."

          # Convert test URLs list into an array
          IFS=' ' read -r -a testList <<< "$TESTFILES_LIST"

          # Log each URL being processed
          echo -e "\uD83D\uDD0D URLs to be tested:"
          for test in "${testList[@]}"; do
            echo -e "  - $test"
          done

          # Pass URLs and inputs to the Node.js script
          node executeGithub.js
          echo -e "\u2705 Lighthouse tests completed."

      # Step 6: Wait for Report Generation (Adding Delay)
      - name: Wait for Reports to be Generated
        run: |
          echo -e "\u23F3 Waiting for 20 seconds to ensure reports are generated..."
          sleep 20

      # Step 7: Export and Move Reports to Reports_QA Folder
      - name: Export and Move Reports
        run: |
          echo -e "\uD83D\uDCC2 Exporting and moving reports to 'Reports_QA' folder..."

          # Create Reports_QA folder if not exists
          mkdir -p ./Reports_QA

          # Move HTML reports to Reports_QA folder
          mv *.html ./Reports_QA/
          echo -e "\u2705 HTML report saved and moved to 'Reports_QA'."

          # Debug: List files in the current directory (to help troubleshoot)
          ls -l

          # Move CSV reports from results to Reports_QA folder
          mv ./results/*.csv ./Reports_QA/
          echo -e "\u2705 CSV report saved and moved to 'Reports_QA'."

      # Step 8: Upload CSV and HTML Reports as Artifacts
      - name: Upload CSV and HTML Reports as Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse-csv-html-reports
          path: ./Reports_QA/*

      # Step 9: Upload Archived Lighthouse Results as Artifacts
      - name: Upload Archived Lighthouse Results as Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse-full-results
          path: ./.lighthouseci/*
